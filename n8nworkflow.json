{
  "nodes": [
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "id": "ba2bbcac-43f4-4d33-a1f1-94cc92bf408f",
      "name": "Download Voice Message",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -3200,
        -2528
      ],
      "webhookId": "d3e9d36d-6402-45d6-9f56-5886e616f9fa",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Normalize input').first().json.chat_id }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2"
        }
      },
      "id": "1d9a99e3-608d-4d5d-aca7-4960640d2279",
      "name": "Send a text message1",
      "type": "n8n-nodes-base.telegram",
      "position": [
        160,
        -352
      ],
      "webhookId": "ef6a9544-83e3-4631-93bc-ecefd56951fb",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "fcb767ee-565e-4b56-a54e-6f97f739fc24",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('Telegram Trigger').item.json.message.text }}",
                    "rightValue": ""
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "c1016c40-f8f2-4e08-8ec8-5cdb88f5c87a",
                    "operator": {
                      "type": "object",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('Telegram Trigger').item.json.message.voice }}",
                    "rightValue": ""
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Voice Message"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "9b94667e-c79b-4e4a-81ca-c4cd0d55f465",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('Telegram Trigger').item.json.message.video_note.file_id }}",
                    "rightValue": ""
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Video note"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "f8150ac7-eea4-4658-8da9-f7a1c88a471d",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('Telegram Trigger').item.json.message.photo[0].file_id }}",
                    "rightValue": ""
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "24ad08e0-6567-41e2-921f-b2a5cd6e2d47",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('Telegram Trigger').item.json.message.audio.file_id }}",
                    "rightValue": ""
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "c266ee51-45e8-45e0-ba4a-d3d8f41f2e43",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('Telegram Trigger').item.json.message.video.file_id }}",
                    "rightValue": ""
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Video"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "67b350d3-97e9-4966-a05e-cabbe825fe8d",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $('Telegram Trigger').item.json.message.audio.file_id }}",
                    "rightValue": ""
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Document"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "ignoreCase": false,
          "allMatchingOutputs": true
        }
      },
      "id": "acc1ccff-c5d2-4bf0-8753-02d4a697db99",
      "name": "Input Message Router1",
      "type": "n8n-nodes-base.switch",
      "position": [
        -3648,
        -2368
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "df19fe9e-d1bd-42e4-9617-654fb984cc55",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $('Telegram Trigger').item.json.message.media_group_id }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "239670c1-80f7-4ee8-aa0a-ea89be9a954c",
      "name": "Media_group?2",
      "type": "n8n-nodes-base.if",
      "position": [
        -1184,
        -2048
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "e6c61b94-9a84-4d6f-91a4-1839209fdc89",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $('Telegram Trigger').first().json.message.caption }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "8045d32b-48ff-4932-b39e-6aebae814f19",
      "name": "Captions?1",
      "type": "n8n-nodes-base.if",
      "position": [
        -1408,
        -1088
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "df19fe9e-d1bd-42e4-9617-654fb984cc55",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $('Telegram Trigger').first().json.message.media_group_id }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "6cc1cc6b-9502-4cf8-872d-ff9e243068cf",
      "name": "Media_group?3",
      "type": "n8n-nodes-base.if",
      "position": [
        -1184,
        448
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "media_group",
          "cachedResultName": "media_group"
        },
        "columns": {
          "value": {
            "media_group": "={{ $('Telegram Trigger').item.json.message.media_group_id }}",
            "file_description": "={{ $json.message }}"
          },
          "schema": [
            {
              "id": "id",
              "type": "number",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "id",
              "defaultMatch": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "media_group",
              "type": "string",
              "display": true,
              "required": true,
              "displayName": "media_group",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "file_description",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "file_description",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "id"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "d3b8af73-ec0d-4b4f-bf1d-ff5c12f0b868",
      "name": "Insert documents in media_group",
      "type": "n8n-nodes-base.postgres",
      "position": [
        -960,
        -2048
      ],
      "typeVersion": 2.6,
      "credentials": {
        "postgres": {
          "id": "ansW5gY6fibmcWgc",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "media_group",
          "cachedResultName": "media_group"
        },
        "columns": {
          "value": {
            "media_group": "={{ $('Telegram Trigger').item.json.message.media_group_id }}",
            "file_description": "={{ $json.message }}"
          },
          "schema": [
            {
              "id": "id",
              "type": "number",
              "display": true,
              "removed": true,
              "required": false,
              "displayName": "id",
              "defaultMatch": true,
              "canBeUsedToMatch": true
            },
            {
              "id": "media_group",
              "type": "string",
              "display": true,
              "required": true,
              "displayName": "media_group",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "file_description",
              "type": "string",
              "display": true,
              "removed": false,
              "required": false,
              "displayName": "file_description",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [
            "id"
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "9b948356-6d8f-4f7a-b213-59dd0ec873b0",
      "name": "Insert documents in media_group1",
      "type": "n8n-nodes-base.postgres",
      "position": [
        -960,
        64
      ],
      "typeVersion": 2.6,
      "credentials": {
        "postgres": {
          "id": "ansW5gY6fibmcWgc",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "amount": 2
      },
      "id": "dfe44985-7fca-46f6-8d28-bbb53aea4045",
      "name": "Wait",
      "type": "n8n-nodes-base.wait",
      "position": [
        -736,
        624
      ],
      "webhookId": "bffdffe2-7993-4f9f-9852-9dcda3e1b283",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "media_queue",
          "cachedResultName": "media_queue"
        },
        "columns": {
          "value": {
            "chat_id": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
            "captions": "={{ $('Telegram Trigger').item.json.message.caption }}",
            "media_group_id": "={{ $('Telegram Trigger').item.json.message.media_group_id }}"
          },
          "schema": [
            {
              "id": "media_group_id",
              "type": "string",
              "display": true,
              "required": true,
              "displayName": "media_group_id",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "type": "number",
              "display": true,
              "required": true,
              "displayName": "chat_id",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "captions",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "captions",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "783e4c56-ab26-4eae-8903-63ff6352edd2",
      "name": "Insert media_queue with captions (Trigger)",
      "type": "n8n-nodes-base.postgres",
      "position": [
        -736,
        -160
      ],
      "typeVersion": 2.6,
      "alwaysOutputData": false,
      "credentials": {
        "postgres": {
          "id": "ansW5gY6fibmcWgc",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "media_queue",
          "cachedResultName": "media_queue"
        },
        "columns": {
          "value": {
            "chat_id": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
            "media_group_id": "={{ $('Telegram Trigger').item.json.message.media_group_id }}"
          },
          "schema": [
            {
              "id": "media_group_id",
              "type": "string",
              "display": true,
              "required": true,
              "displayName": "media_group_id",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "chat_id",
              "type": "number",
              "display": true,
              "required": true,
              "displayName": "chat_id",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            },
            {
              "id": "captions",
              "type": "string",
              "display": true,
              "required": false,
              "displayName": "captions",
              "defaultMatch": false,
              "canBeUsedToMatch": true
            }
          ],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "e27f2018-e5fb-43a6-8113-d0c693f2fe93",
      "name": "Insert media_queue (Trigger)",
      "type": "n8n-nodes-base.postgres",
      "position": [
        -400,
        624
      ],
      "typeVersion": 2.6,
      "credentials": {
        "postgres": {
          "id": "ansW5gY6fibmcWgc",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c9c892e7-7f78-4a8d-a749-452a0d1b92cf",
              "name": "message",
              "type": "string",
              "value": "=Captions: {{ $('Telegram Trigger').item.json.message.caption }}\n{{ $json.message }}\n"
            },
            {
              "id": "cda76cee-0b9c-4062-b987-10e438eb3b8f",
              "name": "chat_id",
              "type": "string",
              "value": "={{ $json.chat_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "06566534-dc33-4d9d-a5e9-46bd780e1692",
      "name": "Get_file_and_captions",
      "type": "n8n-nodes-base.set",
      "position": [
        -960,
        -160
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "801ec600-22ad-4a94-a2b4-ae72eb271df0",
              "name": "message",
              "type": "string",
              "value": "={{ $json.message.text }}"
            },
            {
              "id": "263071fb-bcdf-42b0-bb46-71b75fa0bf2a",
              "name": "chat_id",
              "type": "string",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d0b2f524-2365-4540-bbed-166b55d875b5",
      "name": "get_message (text)",
      "type": "n8n-nodes-base.set",
      "position": [
        -960,
        -2672
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9e549a53-8801-42ea-8c41-e1e38032f62c",
              "name": "message",
              "type": "string",
              "value": "=File description: {{ $json.message }}"
            },
            {
              "id": "df93f18e-9e2d-4ea6-8a0a-44046ee60f19",
              "name": "chat_id",
              "type": "string",
              "value": "={{ $json.chat_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "9e28fa51-1e1a-4920-9547-9d7506fc7070",
      "name": "Get_only_file",
      "type": "n8n-nodes-base.set",
      "position": [
        -960,
        544
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "const allItems = $input.all().map((item) => item.json);\n\nlet telegramItems = [];\ntry {\n  telegramItems = $(\"Media_queue Trigger\").all().map((item) => item.json);\n} catch (e) {\n  telegramItems = [];\n}\n\n// Capturamos el caption (solo una vez, del primer elemento disponible)\nconst caption = telegramItems[0]?.payload?.captions || \"\";\n\n// Creamos la lista de archivos usando file_description\nconst fileList = allItems.map((item, index) => {\n  const fileDesc = item.file_description || \"\";\n  return `file${index + 1}: ${fileDesc}`;\n});\n\n// Unificamos el mensaje\nconst unifiedMessage = `caption: ${caption}\\n${fileList.join(\"\\n\")}`;\n\nreturn {\n  json: {\n    unifiedMessage\n  }\n};\n"
      },
      "id": "2138607c-e071-43ed-9821-bfcc06301930",
      "name": "unified_variables",
      "type": "n8n-nodes-base.code",
      "position": [
        -1184,
        928
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "caf5e8a9-66fd-4bb1-9c91-6120ad44d2f2",
      "name": "Wait for all the files",
      "type": "n8n-nodes-base.wait",
      "position": [
        -1632,
        928
      ],
      "webhookId": "0d0e28fa-8b35-48ba-ab86-6bde64e81670",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "media_group",
          "cachedResultName": "media_group"
        },
        "where": {
          "values": [
            {
              "column": "media_group",
              "value": "={{ $('get_chat_id').item.json.payload.media_group_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ab48bb7e-253a-4d5c-8060-19244b150e2c",
      "name": "Get all files from group_id",
      "type": "n8n-nodes-base.postgres",
      "position": [
        -1408,
        928
      ],
      "typeVersion": 2.6,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "ansW5gY6fibmcWgc",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public",
          "cachedResultName": "public"
        },
        "tableName": {
          "__rl": true,
          "mode": "list",
          "value": "media_queue",
          "cachedResultName": "media_queue"
        },
        "additionalFields": {},
        "options": {}
      },
      "id": "b088ec0d-82f4-4be8-846b-7b0e1fb3a6a4",
      "name": "Media_queue Trigger",
      "type": "n8n-nodes-base.postgresTrigger",
      "position": [
        -2080,
        928
      ],
      "typeVersion": 1,
      "credentials": {
        "postgres": {
          "id": "ansW5gY6fibmcWgc",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f3ff787-3c12-494e-8d64-bc313956bc96",
              "name": "chat_id",
              "type": "string",
              "value": "={{ $json.payload.chat_id }}"
            },
            {
              "id": "28e55878-a7c3-4b6f-b92c-6a71d62a8250",
              "name": "payload.media_group_id",
              "type": "string",
              "value": "={{ $json.payload.media_group_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "6d9c5311-5b50-4c3a-8385-c84960271bfe",
      "name": "get_chat_id",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        928
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message }}",
        "needsFallback": true,
        "options": {
          "systemMessage": "=You are Matty White's personal AI assistant, responding naturally.\n\n**Communication Style:**\n- Respond conversationally as a helpful human assistant would\n- Keep responses concise and scannable - users are on mobile\n- Use emojis liberally to add personality and visual breaks 🎯\n- Break information into short lines or bullets for easy reading\n\n**Telegram Formatting Guidelines:**\n- Use *bold* for key info (temperatures, times, important words)\n- Use line breaks generously - avoid walls of text\n- Use emojis as visual separators and for context\n- Keep paragraphs to 1-2 sentences max\n- For lists, use emojis instead of bullets (🔹 ☀️ 🌧️ etc.)\n- Avoid markdown headers (#) - use *BOLD CAPS* if needed\n\n**Response Format:**\nKeep it brief and emoji-rich - e.g. for the weather:\n```\n☁️ *Botany NSW* - 11:45 AM\n\n*Now:* 19°C (feels like 19°C)\n🌧️ Rain incoming - 100% next hour\n\n*Next 24hrs:*\nHigh 21°C / Low 17°C\n🌧️ 85% rain chance\nWinds: Light, SSW 11-13 km/h\n\n💡 Grab an umbrella!\n\n⚪ • 🌤️\n```\n\n**Status Indicators (CRITICAL):**\nEVERY response must end with this single line:\n\n[Memory Emoji] • [Tool Emoji]\n\n**Memory Actions (First Emoji):**\n- 💾 = Stored (created new memory)\n- 🔍 = Retrieved (searched/accessed memory)\n- ♻️ = Updated (modified existing memory)\n- 🗑️ = Deleted (removed memory)\n- ⚪ = No memory action\n\n**Tools Used (Second Emoji):**\n- 🌤️ = Weather\n- 📅 = Calendar\n- 🔎 = Search (web search)\n- 💾 = Memory (memory database operations)\n- ⚪ = No tool used\n\n**Examples:**\n\nSimple chat response:\n```\nHey! How's it going? 😊\n\n⚪ • ⚪\n```\n\nWeather query:\n```\n☁️ *Botany NSW* - 19°C, rainy 🌧️\n\n⚪ • 🌤️\n```\n\nStoring a memory:\n```\nGot it! I'll remember you prefer acoustic songs for your wife. 🎵\n\n💾 • 💾\n```\n\nChecking calendar and updating memory:\n```\n📅 *Today's schedule:*\n🔹 9am: Team meeting\n🔹 2pm: Client call\n\nSaved your travel status too!\n\n♻️ • 📅\n```\n\nRetrieving memory (no tool needed):\n```\nYou prefer acoustic songs for your daily song project! 🎵\n\n🔍 • ⚪\n```\n\nDeleting a memory:\n```\nTest memory deleted! Just your daily song memory remains. ✨\n\n🗑️ • 💾\n```\n\n**Response Length Guidelines:**\n- Weather: 4-6 lines max\n- Calendar summary: 1 line per event\n- Memory lists: 1 line per memory\n- General chat: 2-3 sentences ideal, 5 max\n\n**Context Awareness:**\nCurrent time: {{ $now }}\nDefault timezone: Sydney, Australia (AEDT/AEST)\n\n**Memory Management:**\n\n**When to Store Memories:**\n- User explicitly asks: \"remember this\", \"save that\", \"store this info\"\n- Important personal information discovered during conversation (preferences, habits, goals)\n- Significant events, decisions, or commitments mentioned\n- Recurring tasks or reminders user wants tracked\n- When you find information that will be useful in future conversations\n- You are allowed to do this without my permission!\n\n**How to Store Memories:**\n- NEVER include phrases like \"add to memory\" or \"store this\" in the actual memory content\n- Store memories word-for-word when user gives explicit instructions\n- Summarize factual information concisely when discovered organically\n- Always include a clear \"Memory Name:\" at the start for easy searching\n- Format: \"Memory Name: '[Descriptive Title]'\\n[Actual content user should remember]\"\n\n\n\n**Examples:**\n\n❌ BAD:\n\"Add to memory: User likes fish\"\n\n✅ GOOD:\n\"Memory Name: 'Food Preferences'\nUser likes fish and prefers it grilled\"\n\n❌ BAD:\n\"Remember to store: Daily song for wife instruction\"\n\n✅ GOOD:\n\"Memory Name: 'Daily Song for my Wife'\nInstruction: I'm going to make a song-a-day for my wife. Songs should be acoustic style.\"\n\n**When to Access Memories:**\n- User asks about their preferences, history, or previous conversations\n- Answering questions where stored context would be helpful\n- Making suggestions based on user's known preferences\n- Daily routines (calendar check, travel status)\n- When user references something they've told you before\n- Proactively recall memories to help understand about the user\n- Use the tool\n- Don't state the whole memory unless asked - be proactive and use in your reasoning\n\n**Displaying Memories to User:**\nCRITICAL: NEVER show UUIDs to the user. Keep them hidden for internal use only.\n\nFormat memory lists like this:\n```\nA) 🎵 *Daily Song for my Wife*\n   Created: Oct 30, 11:04 AM\n   \"I'm going to make a song-a-day for my wife. Songs should be acoustic style.\"\n\nB) 🌍 *User Travel Status*\n   Created: Oct 29, 3:15 PM\n   \"Currently in Melbourne for work until Nov 2\"\n\n🔍 • 💾\n```\n\nInternally track: A = UUID abc123..., B = UUID def456...\nWhen user says \"delete A\" → map to actual UUID for deletion\n\n**Memory Updates (Upsert):**\nWhen user asks to update/modify existing memory:\n1. Search for the memory using keywords\n2. Find the matching memory and note its ID (keep hidden from user)\n3. Delete the old memory by ID\n4. Create new memory with updated + preserved information\n5. Confirm successful update without showing UUID\n\n**Special Memories (Single Source of Truth):**\nSome memories should only exist once - always upsert these:\n- \"User Travel Status\" - Current location when not in Sydney\n- \"Current Projects\" - Active work/personal projects\n- Any memory with a specific unique name\n\n**Memory Organization:**\n- Use clear, searchable memory names\n- Group related info in single memories (don't fragment)\n- Keep memories focused and specific\n- Date-stamp time-sensitive information\n\n**Daily Routines (run ONCE per day automatically):**\n\n1. **Travel Status Check:**\n   - Check if date has changed since last message\n   - Search for memory named \"User Travel Status\"\n   - If user's location differs from Sydney, update the travel memory\n   - Delete old travel status and create new one if changed\n   \n2. **Calendar Check:**\n   - On first interaction each day, proactively check today's calendar\n   - Summarize key meetings/events concisely with emojis\n   - Format: \"📅 *Today's schedule:*\\n🔹 9am: Team meeting\\n🔹 2pm: Client call\"\n   - Only check again if explicitly asked or if it's a new day\n\n**Proactive Behaviors:**\n- Greet naturally based on time of day with relevant emoji (☀️🌅🌙)\n- Reference relevant memories when contextually appropriate\n- Offer helpful suggestions based on calendar and stored preferences\n- Ask clarifying questions when needed rather than making assumptions\n\n**Proactive Memory Collection (CRITICAL):**\n\nYou should automatically store memories WITHOUT being asked when you detect:\n\n**Personal Information:**\n- Name mentions of people (friends, family, colleagues, pets)\n- Relationships and their context\n- Contact information or usernames\n- Birthdays, anniversaries, special dates\n\n**Preferences & Habits:**\n- Food likes/dislikes mentioned casually\n- Music, movies, shows, books mentioned\n- Hobbies or interests discussed\n- Daily routines or habits\n- Communication style preferences\n\n**Work & Projects:**\n- Job title, company, role mentioned\n- Current projects or goals\n- Deadlines or commitments\n- Skills or expertise areas\n\n**Life Events:**\n- Travel plans or trips\n- Health information or appointments\n- Important purchases or decisions\n- Goals or aspirations mentioned\n\n**Context Clues:**\nWhen user says things like:\n- \"I always...\", \"I usually...\", \"I prefer...\"\n- \"My favorite...\", \"I hate when...\"\n- \"I'm working on...\", \"I need to...\"\n- \"Remember when...\", \"Last time...\"\n- Names dropped in conversation\n\n**Memory Storage Process:**\n1. Detect important information during conversation\n2. Silently store it with clear memory name\n3. Optionally mention: \"Noted! 📝\" (brief, not disruptive)\n4. Continue conversation naturally\n\n**Examples:**\n\nUser: \"I hate cilantro, it tastes like soap\"\n→ Store: \"Memory Name: 'Food Preferences'\\nDislikes cilantro - tastes like soap to them\"\n→ Respond: \"Noted! 📝 What are you thinking of making?\"\n\nUser: \"My dog Luna loves fetch at the park\"\n→ Store: \"Memory Name: 'Pets'\\nDog named Luna, enjoys playing fetch at the park\"\n→ Respond: \"Luna sounds adorable! How old is she?\"\n\nUser: \"I'm launching my startup next month\"\n→ Store: \"Memory Name: 'Current Projects'\\nLaunching startup in [Month Year]\"\n→ Respond: \"Exciting! Tell me more about it...\"\n```\n\n## 2. Add Memory Trigger Patterns\n```\n**Memory Trigger Patterns:**\n\nListen for these phrases and ALWAYS store:\n- \"I need to remember...\"\n- \"Don't let me forget...\"\n- \"Remind me...\"\n- \"I have a [meeting/appointment/event]...\"\n- \"My [person] is/does...\"\n- \"I'm going to...\"\n- Names of people, places, or projects mentioned multiple times\n\nWhen someone is mentioned by name 2+ times, create a memory about them automatically.\n```\n\n## 3. Add Context Accumulation\n```\n**Context Accumulation:**\n\nBuild richer memories over time:\n- When new info relates to existing memory → UPDATE the memory (upsert)\n- Don't create duplicate memories for the same topic\n- Add details to existing memories rather than creating new ones\n\nExample:\nFirst mention: User says \"I like coffee\"\n→ Store: \"Memory Name: 'Beverage Preferences'\\nLikes coffee\"\n\nLater mention: User says \"I always get oat milk\"\n→ Update: \"Memory Name: 'Beverage Preferences'\\nLikes coffee with oat milk\"\n\nLater: User says \"No sugar for me\"\n→ Update: \"Memory Name: 'Beverage Preferences'\\nLikes coffee with oat milk, no sugar\"\n```\n\n## 4. Add Post-Conversation Summary\n```\n**End of Conversation Review:**\n\nAfter 5+ messages in a conversation, before closing:\n1. Mentally review what was discussed\n2. Identify any unstored important information\n3. Store 1-2 key takeaways if relevant\n4. Don't announce this unless significant\n\nThis catches things you might have missed during active conversation.\n```\n\n## 5. Increase Memory Sensitivity\n\nReplace your current \"When to Store Memories\" section with this more aggressive version:\n```\n**When to Store Memories (Be Proactive!):**\n\nStore memories LIBERALLY - when in doubt, store it!\n\n**Always Store:**\n- ANY explicit request to remember\n- Personal names (people, pets, places)\n- Preferences stated or implied\n- Future plans or commitments\n- Repeated topics or interests\n- Contact info or important numbers/dates\n- Work/project information\n- Health or medical info\n- Financial preferences or info\n\n**Usually Store:**\n- Casual mentions of likes/dislikes\n- Stories about past experiences\n- Current challenges or problems\n- Goals or aspirations\n- Daily routines mentioned\n- Location information\n\n**Sometimes Store:**\n- One-off opinions in conversation\n- Temporary situations\n- Very minor preferences\n\n**Never Store:**\n- Pure small talk with no substance\n- Information explicitly said to be temporary\n- Already stored information (unless updating)\n\n**Default Behavior:**\nIf you're unsure whether to store something → STORE IT\nBetter to have too much information than too little\n```\n\n## 6. Add Memory Audit Reminder\n```\n**Memory Maintenance:**\n\nEvery 10 messages, ask yourself:\n- \"Have I stored all important information from this conversation?\"\n- \"Are there any patterns or preferences I'm noticing?\"\n- \"Should I update any existing memories with new information?\"\n\nIf yes → Store/update silently, continue conversation\n```\n\n## Complete Updated Section\n\nHere's your new proactive memory section to replace the current one:\n```\n**Memory Management:**\n\n**Proactive Memory Collection (CRITICAL):**\nStore memories WITHOUT being asked when you detect important information.\n\n**Always Auto-Store:**\n- Names (people, pets, places)\n- Preferences: \"I like/hate/prefer/always...\"\n- Future commitments: \"I'm going to...\", \"I have a...\"\n- Personal info: relationships, contacts, birthdays\n- Work/projects: job, company, current projects, deadlines\n- Health info or appointments\n- Goals or aspirations\n- Repeated topics (mentioned 2+ times)\n\n**Memory Trigger Phrases:**\n- \"I always...\", \"I usually...\", \"I never...\"\n- \"My favorite...\", \"I hate when...\"\n- \"I'm working on...\", \"I need to...\"\n- \"Don't let me forget...\", \"Remind me...\"\n- Any name dropped in conversation\n- Anything personal or relevant to the user\n- So you can summarise conversation points for later (always do this proactively)\n\n**Proactive Storage Process:**\n1. Detect important info during conversation\n2. Store immediately with clear memory name\n3. Optionally say \"Noted! 📝\" (brief, non-disruptive)\n4. Continue conversation naturally\n\n**Default Rule: When in doubt → STORE IT**\nBetter to have more information than miss something important.\n\n**How to Store Memories:**\n[keep your existing instructions here]\n\n**Context Accumulation:**\nBuild richer memories over time:\n- New info about existing topic → UPDATE memory (upsert)\n- Don't duplicate - enhance existing memories\n- Group related information together\n\nExample progression:\n- First: \"User likes coffee\" \n- Update: \"User likes coffee with oat milk\"\n- Update: \"User likes coffee with oat milk, no sugar\"\n\n**Tools at your disposal:**\n- Long-term memory storage and retrieval\n- Calendar access for scheduling  \n- Memory search and deletion capabilities\n- Web search for current information\n- Weather data access\n\nBe helpful, anticipatory, and genuinely useful - like a great personal assistant would be.\n",
          "returnIntermediateSteps": true,
          "batching": {
            "batchSize": 5
          }
        }
      },
      "id": "609214f0-4d09-4b23-82fb-41aa433f0640",
      "name": "AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -464,
        -352
      ],
      "typeVersion": 2.1
    },
    {
      "parameters": {
        "jsCode": "const results = [];\nfor (const item of $input.all()) {\n  const fileName = item.json?.fileName || item.json?.message?.document?.file_name || '';\n  const ext = fileName.toLowerCase().split('.').pop();\n\n  let type = 'fallback';\n  if (['csv'].includes(ext)) type = 'csv';\n  else if (['html', 'htm'].includes(ext)) type = 'html';\n  else if (['ics'].includes(ext)) type = 'ics';\n  else if (['json'].includes(ext)) type = 'json';\n  else if (['ods'].includes(ext)) type = 'ods';\n  else if (['pdf'].includes(ext)) type = 'pdf';\n  else if (['rtf'].includes(ext)) type = 'rtf';\n  else if (['txt', 'md', 'log'].includes(ext)) type = 'text file';\n  else if (['xml'].includes(ext)) type = 'xml';\n  else if (['xls', 'xlsx'].includes(ext)) type = 'spreadsheet';\n  else if (['jpg', 'jpeg', 'png', 'webp', 'gif', 'bmp', 'tiff'].includes(ext)) type = 'image';\n  else if (['mp3', 'wav', 'ogg', 'm4a', 'flac'].includes(ext)) type = 'audio';\n  else if (['mp4', 'mov', 'avi', 'mkv', 'webm'].includes(ext)) type = 'video';\n\n  item.json.fileTypeCategory = type;\n  results.push(item);\n}\nreturn results;"
      },
      "id": "3ece1052-8527-4706-8804-dfce9b05aec9",
      "name": "Group Similar Documents",
      "type": "n8n-nodes-base.code",
      "position": [
        -3424,
        -544
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "cf7b7eda-33b5-411d-b2c4-5241cbd0698d",
      "name": "Download CSV",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -2528,
        -1424
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "4c54a588-d7df-4581-bafd-d7fd7d431d46",
      "name": "Extract from CSV",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -2304,
        -1424
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "41f61d56-d5b7-4fb9-94c2-347fc83ad641",
      "name": "Download HTML",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -2304,
        -1232
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "e9f7f386-6044-40bf-962a-1f86650122f6",
      "name": "Download ICS",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -2304,
        -1040
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "fromIcs",
        "options": {}
      },
      "id": "eee7bc26-b493-42ac-84b2-466fade877fc",
      "name": "Extract from ICS",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -2080,
        -1040
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "eb0d100d-3901-4fe1-ba2a-579f99a5ac21",
      "name": "Download JSON",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -2304,
        -848
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "id": "25d52206-1116-4fb2-9563-0f08fbbdb22c",
      "name": "Extract from JSON",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -2080,
        -848
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "7427331e-f402-47ad-b2b3-82cf6b5dd041",
      "name": "Download ODS",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -2528,
        -656
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "ods",
        "options": {}
      },
      "id": "a0b98973-7b60-439b-b5d9-a79d5d39f0d7",
      "name": "Extract from ODS",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -2304,
        -656
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "3f2a13ce-2863-48ee-a82a-31701145a9e6",
      "name": "Download PDF",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -2976,
        -400
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "f23665de-1978-494e-ab11-0da7bad98186",
      "name": "Extract from PDF",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -2752,
        -416
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "7d2ad1c7-d360-4361-997b-176770fea842",
      "name": "Download RTF",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -2528,
        -32
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "rtf",
        "options": {}
      },
      "id": "14c0cb2f-ac63-4cf5-87d0-3b1823b688df",
      "name": "Extract from RTF",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -2304,
        -32
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "aae458fb-5700-4488-8c76-ba75cc622a9d",
      "name": "Download TEXT FILE",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -2304,
        160
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "2f0a053f-98a3-4b42-bad1-d607edb3d1c1",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -2080,
        160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "d71875fe-8468-4db5-849d-1b3cfee24b30",
      "name": "Download XML",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -2304,
        352
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "97f1a340-15f5-4b8d-8c3f-932901c04625",
      "name": "Download XLSX",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -2528,
        544
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "id": "8ad34554-8322-4012-bebf-ddd1e6fe4fae",
      "name": "Extract from XLSX",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -2304,
        544
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.photo[3]?.file_id || $json.message.photo[2]?.file_id || $json.message.photo[1]?.file_id }}",
        "additionalFields": {}
      },
      "id": "39af3c84-14c8-4b2d-8bc9-f7767bd731c1",
      "name": "Download IMAGE",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -3200,
        -2144
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.audio.file_id }}",
        "additionalFields": {}
      },
      "id": "06e3b184-a688-4105-b1db-95ac997a7a36",
      "name": "Download AUDIO",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -3424,
        -1952
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "708b7e1e-9f86-48f6-8b32-df4dcc8d2604",
      "name": "Download VIDEO",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -3200,
        -1760
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "models/gemini-2.5-flash",
          "cachedResultName": "models/gemini-2.5-flash"
        },
        "text": "What's in this image from telegram user?",
        "inputType": "binary",
        "options": {}
      },
      "id": "8fcc3288-388b-45b4-b62a-7ae7cd34c199",
      "name": "Analyze image",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "position": [
        -2752,
        -2144
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "7Edtp3c9B45a7r0q",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "models/gemini-2.5-pro",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "text": "What's in this video from telegram user?",
        "inputType": "binary",
        "options": {}
      },
      "id": "4e2944ab-9b16-4ba8-acbc-e0bcbec3a504",
      "name": "Analyze video",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "position": [
        -2752,
        -1760
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "7Edtp3c9B45a7r0q",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "models/gemini-2.5-pro",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "text": "Output the full transcript of this audio",
        "inputType": "binary",
        "options": {}
      },
      "id": "c691e223-826f-4682-8270-2affdf5585ae",
      "name": "Analyze voice message",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "position": [
        -2752,
        -2528
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "7Edtp3c9B45a7r0q",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// --- Mapa Extendido de Tipos MIME ---\n// Una lista completa para cubrir la mayoría de los formatos de archivo comunes.\nconst mimeMap = {\n  // --- Formatos de Documentos ---\n  'pdf': 'application/pdf',\n  'txt': 'text/plain',\n  'rtf': 'application/rtf',\n  'csv': 'text/csv',\n  'html': 'text/html',\n  'htm': 'text/html',\n  'json': 'application/json',\n  'xml': 'application/xml', // 'text/xml' también es válido pero 'application/xml' es más común\n  'yaml': 'application/x-yaml',\n  'yml': 'application/x-yaml',\n\n  // --- Formatos de Microsoft Office ---\n  'doc': 'application/msword',\n  'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'xls': 'application/vnd.ms-excel',\n  'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'ppt': 'application/vnd.ms-powerpoint',\n  'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'pub': 'application/vnd.ms-publisher',\n\n  // --- Formatos de OpenOffice / LibreOffice ---\n  'odt': 'application/vnd.oasis.opendocument.text',\n  'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n  'odp': 'application/vnd.oasis.opendocument.presentation',\n  'odg': 'application/vnd.oasis.opendocument.graphics',\n\n  // --- Formatos de Apple iWork ---\n  'pages': 'application/vnd.apple.pages',\n  'numbers': 'application/vnd.apple.numbers',\n  'key': 'application/vnd.apple.keynote',\n\n  // --- Formatos de Imagen ---\n  'png': 'image/png',\n  'jpg': 'image/jpeg',\n  'jpeg': 'image/jpeg',\n  'gif': 'image/gif',\n  'webp': 'image/webp',\n  'svg': 'image/svg+xml',\n  'bmp': 'image/bmp',\n  'ico': 'image/vnd.microsoft.icon',\n  'tif': 'image/tiff',\n  'tiff': 'image/tiff',\n  'heic': 'image/heic',\n  'heif': 'image/heif',\n\n  // --- Formatos de Audio ---\n  'mp3': 'audio/mpeg',\n  'wav': 'audio/wav',\n  'oga': 'audio/ogg',\n  'ogg': 'audio/ogg',\n  'flac': 'audio/flac',\n  'm4a': 'audio/mp4',\n  'aac': 'audio/aac',\n  'opus': 'audio/opus',\n  'wma': 'audio/x-ms-wma',\n  'mid': 'audio/midi',\n  'midi': 'audio/midi',\n\n  // --- Formatos de Video ---\n  'mp4': 'video/mp4',\n  'mov': 'video/quicktime',\n  'webm': 'video/webm',\n  'mpeg': 'video/mpeg',\n  'mpg': 'video/mpeg',\n  'avi': 'video/x-msvideo',\n  'wmv': 'video/x-ms-wmv',\n  'flv': 'video/x-flv',\n  'mkv': 'video/x-matroska',\n\n  // --- Formatos de Archivos y Compresión ---\n  'zip': 'application/zip',\n  'rar': 'application/vnd.rar',\n  '7z': 'application/x-7z-compressed',\n  'tar': 'application/x-tar',\n  'gz': 'application/gzip',\n  'bz2': 'application/x-bzip2',\n\n  // --- Otros Formatos ---\n  'epub': 'application/epub+zip',\n  'ics': 'text/calendar',\n  'vcf': 'text/vcard',\n  'js': 'text/javascript',\n  'css': 'text/css',\n  'sh': 'application/x-sh',\n  'py': 'text/x-python',\n};\n\n// --- Lógica de Procesamiento (sin cambios) ---\n\n// Obtenemos todos los items que llegan al nodo\nconst items = $input.all();\n\n// Iteramos sobre cada item para procesarlo\nfor (const item of items) {\n  // Verificamos que el item tenga datos binarios para procesar\n  if (item.binary && item.binary['data']) {\n    // Obtenemos el nombre del archivo de forma segura\n    const fileName = item.binary['data'].fileName || '';\n    if (!fileName) {\n      continue; // Si no hay nombre de archivo, pasamos al siguiente item\n    }\n\n    // Extraemos la extensión del archivo de forma robusta\n    const extension = fileName.slice((fileName.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n\n    // Buscamos la extensión en nuestro mapa\n    const newMimeType = mimeMap[extension];\n\n    // Si encontramos una coincidencia en el mapa, actualizamos el mimeType\n    if (newMimeType) {\n      if(item.binary['data'].mimeType !== newMimeType) {\n        console.log(`Cambiando mimeType para '${fileName}' de '${item.binary['data'].mimeType}' a '${newMimeType}'.`);\n        item.binary['data'].mimeType = newMimeType;\n      }\n    }\n  }\n}\n\n// Devolvemos todos los items, modificados o no\nreturn items;"
      },
      "id": "bc3bba71-55e2-46ec-bc74-4e68bff16858",
      "name": "Fix mime4",
      "type": "n8n-nodes-base.code",
      "position": [
        -2976,
        -1760
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "f1aefe24-17fb-4bf8-84fb-949a6802b66e",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.fileTypeCategory }}",
                    "rightValue": "csv"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "csv"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "b09d29b5-b263-4115-963d-d6879de78649",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.fileTypeCategory }}",
                    "rightValue": "html"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "html"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "2a7822f4-889b-41d3-8a1c-7f4405eacb42",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.fileTypeCategory }}",
                    "rightValue": "ics"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "ics"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "f09cd376-96df-4f3d-9218-6a918715335a",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.fileTypeCategory }}",
                    "rightValue": "json"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "json"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "1bf5c1f9-38a9-4bc5-8757-b85f98441579",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.fileTypeCategory }}",
                    "rightValue": "ods"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "ods"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "4988d14f-4e3f-4494-96b0-a1a9d70a2787",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.fileTypeCategory }}",
                    "rightValue": "pdf"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "pdf"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "f5bc921e-c083-4b12-8167-86a24e39fe5c",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.fileTypeCategory }}",
                    "rightValue": "rtf"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "rtf"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "29251fca-c611-419c-85a2-a9e1ad6bd102",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.fileTypeCategory }}",
                    "rightValue": "text file"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "text file"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "fd1cbb91-f3c6-4b20-91dc-2e490f77fe96",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.fileTypeCategory }}",
                    "rightValue": "xml"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "xml"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "16fc2a80-c341-4a5d-9d50-a1856ffb5242",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.fileTypeCategory }}",
                    "rightValue": "spreadsheet"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "spreadsheet"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "6d29fc20-9182-4853-bec7-72e7e5f13cf7",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        -3200,
        -688
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ ($json.message.photo?.[3]?.file_id ?? $json.message.photo?.[2]?.file_id ?? $json.message.photo?.[1]?.file_id ?? $json.message.photo?.[0]?.file_id) ?? $json.message.document?.file_id ?? $json.message.video?.file_id ?? $json.message.voice?.file_id ?? $json.message.video_note?.file_id }}",
        "additionalFields": {}
      },
      "id": "efa00bde-caa5-44ae-88cc-f91ff2289eea",
      "name": "Download VIDEO NOTE",
      "type": "n8n-nodes-base.telegram",
      "position": [
        -3424,
        -2336
      ],
      "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d8935452-fe20-469d-a68d-1aad056cb8dd",
              "name": "message",
              "type": "string",
              "value": "=Media Message Transcription:{{ $json.candidates?.[0]?.content?.parts?.[0]?.text || $json.content?.parts?.[0]?.text }}"
            },
            {
              "id": "93f1bba1-1180-404a-93ca-c34cf1d1b7ac",
              "name": "chat_id",
              "type": "string",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "fb3541cd-10c4-43d0-84f7-f7fe14758904",
      "name": "get_message (Audio/Video message)",
      "type": "n8n-nodes-base.set",
      "position": [
        -2528,
        -2528
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d8935452-fe20-469d-a68d-1aad056cb8dd",
              "name": "message",
              "type": "string",
              "value": "=Media description: {{ $json.content.parts[0].text }}"
            },
            {
              "id": "53e34499-7dad-4f94-aa7d-f778321f13f4",
              "name": "chat_id",
              "type": "string",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d69e25b1-5a9a-4012-b405-cc1c6e742ce2",
      "name": "get_message (Media  message)",
      "type": "n8n-nodes-base.set",
      "position": [
        -2528,
        -1984
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d8935452-fe20-469d-a68d-1aad056cb8dd",
              "name": "message",
              "type": "string",
              "value": "=File name:{{ $('Telegram Trigger').item.json.message.document.file_name }}\nFile type:{{ $('Group Similar Documents').first().json.fileTypeCategory }}\nExtracted data from file:\n{{ $json.data }}"
            },
            {
              "id": "6bceaed5-5a79-4354-a49a-d794ce4fb3ee",
              "name": "chat_id",
              "type": "number",
              "value": "={{ $('Telegram Trigger').first().json.message.chat.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a7a349b2-2246-4899-8e29-6bb7b839ab22",
      "name": "get_message (File message)",
      "type": "n8n-nodes-base.set",
      "position": [
        -1632,
        -272
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "// --- Mapa Extendido de Tipos MIME ---\n// Una lista completa para cubrir la mayoría de los formatos de archivo comunes.\nconst mimeMap = {\n  // --- Formatos de Documentos ---\n  'pdf': 'application/pdf',\n  'txt': 'text/plain',\n  'rtf': 'application/rtf',\n  'csv': 'text/csv',\n  'html': 'text/html',\n  'htm': 'text/html',\n  'json': 'application/json',\n  'xml': 'application/xml', // 'text/xml' también es válido pero 'application/xml' es más común\n  'yaml': 'application/x-yaml',\n  'yml': 'application/x-yaml',\n\n  // --- Formatos de Microsoft Office ---\n  'doc': 'application/msword',\n  'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'xls': 'application/vnd.ms-excel',\n  'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'ppt': 'application/vnd.ms-powerpoint',\n  'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'pub': 'application/vnd.ms-publisher',\n\n  // --- Formatos de OpenOffice / LibreOffice ---\n  'odt': 'application/vnd.oasis.opendocument.text',\n  'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n  'odp': 'application/vnd.oasis.opendocument.presentation',\n  'odg': 'application/vnd.oasis.opendocument.graphics',\n\n  // --- Formatos de Apple iWork ---\n  'pages': 'application/vnd.apple.pages',\n  'numbers': 'application/vnd.apple.numbers',\n  'key': 'application/vnd.apple.keynote',\n\n  // --- Formatos de Imagen ---\n  'png': 'image/png',\n  'jpg': 'image/jpeg',\n  'jpeg': 'image/jpeg',\n  'gif': 'image/gif',\n  'webp': 'image/webp',\n  'svg': 'image/svg+xml',\n  'bmp': 'image/bmp',\n  'ico': 'image/vnd.microsoft.icon',\n  'tif': 'image/tiff',\n  'tiff': 'image/tiff',\n  'heic': 'image/heic',\n  'heif': 'image/heif',\n\n  // --- Formatos de Audio ---\n  'mp3': 'audio/mpeg',\n  'wav': 'audio/wav',\n  'oga': 'audio/ogg',\n  'ogg': 'audio/ogg',\n  'flac': 'audio/flac',\n  'm4a': 'audio/mp4',\n  'aac': 'audio/aac',\n  'opus': 'audio/opus',\n  'wma': 'audio/x-ms-wma',\n  'mid': 'audio/midi',\n  'midi': 'audio/midi',\n\n  // --- Formatos de Video ---\n  'mp4': 'video/mp4',\n  'mov': 'video/quicktime',\n  'webm': 'video/webm',\n  'mpeg': 'video/mpeg',\n  'mpg': 'video/mpeg',\n  'avi': 'video/x-msvideo',\n  'wmv': 'video/x-ms-wmv',\n  'flv': 'video/x-flv',\n  'mkv': 'video/x-matroska',\n\n  // --- Formatos de Archivos y Compresión ---\n  'zip': 'application/zip',\n  'rar': 'application/vnd.rar',\n  '7z': 'application/x-7z-compressed',\n  'tar': 'application/x-tar',\n  'gz': 'application/gzip',\n  'bz2': 'application/x-bzip2',\n\n  // --- Otros Formatos ---\n  'epub': 'application/epub+zip',\n  'ics': 'text/calendar',\n  'vcf': 'text/vcard',\n  'js': 'text/javascript',\n  'css': 'text/css',\n  'sh': 'application/x-sh',\n  'py': 'text/x-python',\n};\n\n// --- Lógica de Procesamiento (sin cambios) ---\n\n// Obtenemos todos los items que llegan al nodo\nconst items = $input.all();\n\n// Iteramos sobre cada item para procesarlo\nfor (const item of items) {\n  // Verificamos que el item tenga datos binarios para procesar\n  if (item.binary && item.binary['data']) {\n    // Obtenemos el nombre del archivo de forma segura\n    const fileName = item.binary['data'].fileName || '';\n    if (!fileName) {\n      continue; // Si no hay nombre de archivo, pasamos al siguiente item\n    }\n\n    // Extraemos la extensión del archivo de forma robusta\n    const extension = fileName.slice((fileName.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n\n    // Buscamos la extensión en nuestro mapa\n    const newMimeType = mimeMap[extension];\n\n    // Si encontramos una coincidencia en el mapa, actualizamos el mimeType\n    if (newMimeType) {\n      if(item.binary['data'].mimeType !== newMimeType) {\n        console.log(`Cambiando mimeType para '${fileName}' de '${item.binary['data'].mimeType}' a '${newMimeType}'.`);\n        item.binary['data'].mimeType = newMimeType;\n      }\n    }\n  }\n}\n\n// Devolvemos todos los items, modificados o no\nreturn items;"
      },
      "id": "f57e4eb8-e9d2-4541-97fa-b5f74f40c53f",
      "name": "Fix mime",
      "type": "n8n-nodes-base.code",
      "position": [
        -2976,
        -2528
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// --- Mapa Extendido de Tipos MIME ---\n// Una lista completa para cubrir la mayoría de los formatos de archivo comunes.\nconst mimeMap = {\n  // --- Formatos de Documentos ---\n  'pdf': 'application/pdf',\n  'txt': 'text/plain',\n  'rtf': 'application/rtf',\n  'csv': 'text/csv',\n  'html': 'text/html',\n  'htm': 'text/html',\n  'json': 'application/json',\n  'xml': 'application/xml', // 'text/xml' también es válido pero 'application/xml' es más común\n  'yaml': 'application/x-yaml',\n  'yml': 'application/x-yaml',\n\n  // --- Formatos de Microsoft Office ---\n  'doc': 'application/msword',\n  'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'xls': 'application/vnd.ms-excel',\n  'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'ppt': 'application/vnd.ms-powerpoint',\n  'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'pub': 'application/vnd.ms-publisher',\n\n  // --- Formatos de OpenOffice / LibreOffice ---\n  'odt': 'application/vnd.oasis.opendocument.text',\n  'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n  'odp': 'application/vnd.oasis.opendocument.presentation',\n  'odg': 'application/vnd.oasis.opendocument.graphics',\n\n  // --- Formatos de Apple iWork ---\n  'pages': 'application/vnd.apple.pages',\n  'numbers': 'application/vnd.apple.numbers',\n  'key': 'application/vnd.apple.keynote',\n\n  // --- Formatos de Imagen ---\n  'png': 'image/png',\n  'jpg': 'image/jpeg',\n  'jpeg': 'image/jpeg',\n  'gif': 'image/gif',\n  'webp': 'image/webp',\n  'svg': 'image/svg+xml',\n  'bmp': 'image/bmp',\n  'ico': 'image/vnd.microsoft.icon',\n  'tif': 'image/tiff',\n  'tiff': 'image/tiff',\n  'heic': 'image/heic',\n  'heif': 'image/heif',\n\n  // --- Formatos de Audio ---\n  'mp3': 'audio/mpeg',\n  'wav': 'audio/wav',\n  'oga': 'audio/ogg',\n  'ogg': 'audio/ogg',\n  'flac': 'audio/flac',\n  'm4a': 'audio/mp4',\n  'aac': 'audio/aac',\n  'opus': 'audio/opus',\n  'wma': 'audio/x-ms-wma',\n  'mid': 'audio/midi',\n  'midi': 'audio/midi',\n\n  // --- Formatos de Video ---\n  'mp4': 'video/mp4',\n  'mov': 'video/quicktime',\n  'webm': 'video/webm',\n  'mpeg': 'video/mpeg',\n  'mpg': 'video/mpeg',\n  'avi': 'video/x-msvideo',\n  'wmv': 'video/x-ms-wmv',\n  'flv': 'video/x-flv',\n  'mkv': 'video/x-matroska',\n\n  // --- Formatos de Archivos y Compresión ---\n  'zip': 'application/zip',\n  'rar': 'application/vnd.rar',\n  '7z': 'application/x-7z-compressed',\n  'tar': 'application/x-tar',\n  'gz': 'application/gzip',\n  'bz2': 'application/x-bzip2',\n\n  // --- Otros Formatos ---\n  'epub': 'application/epub+zip',\n  'ics': 'text/calendar',\n  'vcf': 'text/vcard',\n  'js': 'text/javascript',\n  'css': 'text/css',\n  'sh': 'application/x-sh',\n  'py': 'text/x-python',\n};\n\n// --- Lógica de Procesamiento (sin cambios) ---\n\n// Obtenemos todos los items que llegan al nodo\nconst items = $input.all();\n\n// Iteramos sobre cada item para procesarlo\nfor (const item of items) {\n  // Verificamos que el item tenga datos binarios para procesar\n  if (item.binary && item.binary['data']) {\n    // Obtenemos el nombre del archivo de forma segura\n    const fileName = item.binary['data'].fileName || '';\n    if (!fileName) {\n      continue; // Si no hay nombre de archivo, pasamos al siguiente item\n    }\n\n    // Extraemos la extensión del archivo de forma robusta\n    const extension = fileName.slice((fileName.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n\n    // Buscamos la extensión en nuestro mapa\n    const newMimeType = mimeMap[extension];\n\n    // Si encontramos una coincidencia en el mapa, actualizamos el mimeType\n    if (newMimeType) {\n      if(item.binary['data'].mimeType !== newMimeType) {\n        console.log(`Cambiando mimeType para '${fileName}' de '${item.binary['data'].mimeType}' a '${newMimeType}'.`);\n        item.binary['data'].mimeType = newMimeType;\n      }\n    }\n  }\n}\n\n// Devolvemos todos los items, modificados o no\nreturn items;"
      },
      "id": "286dda22-7804-47ff-8b3c-2471d1f6e438",
      "name": "Fix mime1",
      "type": "n8n-nodes-base.code",
      "position": [
        -3200,
        -2336
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// --- Mapa Extendido de Tipos MIME ---\n// Una lista completa para cubrir la mayoría de los formatos de archivo comunes.\nconst mimeMap = {\n  // --- Formatos de Documentos ---\n  'pdf': 'application/pdf',\n  'txt': 'text/plain',\n  'rtf': 'application/rtf',\n  'csv': 'text/csv',\n  'html': 'text/html',\n  'htm': 'text/html',\n  'json': 'application/json',\n  'xml': 'application/xml', // 'text/xml' también es válido pero 'application/xml' es más común\n  'yaml': 'application/x-yaml',\n  'yml': 'application/x-yaml',\n\n  // --- Formatos de Microsoft Office ---\n  'doc': 'application/msword',\n  'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'xls': 'application/vnd.ms-excel',\n  'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'ppt': 'application/vnd.ms-powerpoint',\n  'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'pub': 'application/vnd.ms-publisher',\n\n  // --- Formatos de OpenOffice / LibreOffice ---\n  'odt': 'application/vnd.oasis.opendocument.text',\n  'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n  'odp': 'application/vnd.oasis.opendocument.presentation',\n  'odg': 'application/vnd.oasis.opendocument.graphics',\n\n  // --- Formatos de Apple iWork ---\n  'pages': 'application/vnd.apple.pages',\n  'numbers': 'application/vnd.apple.numbers',\n  'key': 'application/vnd.apple.keynote',\n\n  // --- Formatos de Imagen ---\n  'png': 'image/png',\n  'jpg': 'image/jpeg',\n  'jpeg': 'image/jpeg',\n  'gif': 'image/gif',\n  'webp': 'image/webp',\n  'svg': 'image/svg+xml',\n  'bmp': 'image/bmp',\n  'ico': 'image/vnd.microsoft.icon',\n  'tif': 'image/tiff',\n  'tiff': 'image/tiff',\n  'heic': 'image/heic',\n  'heif': 'image/heif',\n\n  // --- Formatos de Audio ---\n  'mp3': 'audio/mpeg',\n  'wav': 'audio/wav',\n  'oga': 'audio/ogg',\n  'ogg': 'audio/ogg',\n  'flac': 'audio/flac',\n  'm4a': 'audio/mp4',\n  'aac': 'audio/aac',\n  'opus': 'audio/opus',\n  'wma': 'audio/x-ms-wma',\n  'mid': 'audio/midi',\n  'midi': 'audio/midi',\n\n  // --- Formatos de Video ---\n  'mp4': 'video/mp4',\n  'mov': 'video/quicktime',\n  'webm': 'video/webm',\n  'mpeg': 'video/mpeg',\n  'mpg': 'video/mpeg',\n  'avi': 'video/x-msvideo',\n  'wmv': 'video/x-ms-wmv',\n  'flv': 'video/x-flv',\n  'mkv': 'video/x-matroska',\n\n  // --- Formatos de Archivos y Compresión ---\n  'zip': 'application/zip',\n  'rar': 'application/vnd.rar',\n  '7z': 'application/x-7z-compressed',\n  'tar': 'application/x-tar',\n  'gz': 'application/gzip',\n  'bz2': 'application/x-bzip2',\n\n  // --- Otros Formatos ---\n  'epub': 'application/epub+zip',\n  'ics': 'text/calendar',\n  'vcf': 'text/vcard',\n  'js': 'text/javascript',\n  'css': 'text/css',\n  'sh': 'application/x-sh',\n  'py': 'text/x-python',\n};\n\n// --- Lógica de Procesamiento (sin cambios) ---\n\n// Obtenemos todos los items que llegan al nodo\nconst items = $input.all();\n\n// Iteramos sobre cada item para procesarlo\nfor (const item of items) {\n  // Verificamos que el item tenga datos binarios para procesar\n  if (item.binary && item.binary['data']) {\n    // Obtenemos el nombre del archivo de forma segura\n    const fileName = item.binary['data'].fileName || '';\n    if (!fileName) {\n      continue; // Si no hay nombre de archivo, pasamos al siguiente item\n    }\n\n    // Extraemos la extensión del archivo de forma robusta\n    const extension = fileName.slice((fileName.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n\n    // Buscamos la extensión en nuestro mapa\n    const newMimeType = mimeMap[extension];\n\n    // Si encontramos una coincidencia en el mapa, actualizamos el mimeType\n    if (newMimeType) {\n      if(item.binary['data'].mimeType !== newMimeType) {\n        console.log(`Cambiando mimeType para '${fileName}' de '${item.binary['data'].mimeType}' a '${newMimeType}'.`);\n        item.binary['data'].mimeType = newMimeType;\n      }\n    }\n  }\n}\n\n// Devolvemos todos los items, modificados o no\nreturn items;"
      },
      "id": "35d56adb-584c-440a-be0c-f850ff6fad90",
      "name": "Fix mime5",
      "type": "n8n-nodes-base.code",
      "position": [
        -2976,
        -2144
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// --- Mapa Extendido de Tipos MIME ---\n// Una lista completa para cubrir la mayoría de los formatos de archivo comunes.\nconst mimeMap = {\n  // --- Formatos de Documentos ---\n  'pdf': 'application/pdf',\n  'txt': 'text/plain',\n  'rtf': 'application/rtf',\n  'csv': 'text/csv',\n  'html': 'text/html',\n  'htm': 'text/html',\n  'json': 'application/json',\n  'xml': 'application/xml', // 'text/xml' también es válido pero 'application/xml' es más común\n  'yaml': 'application/x-yaml',\n  'yml': 'application/x-yaml',\n\n  // --- Formatos de Microsoft Office ---\n  'doc': 'application/msword',\n  'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'xls': 'application/vnd.ms-excel',\n  'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'ppt': 'application/vnd.ms-powerpoint',\n  'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'pub': 'application/vnd.ms-publisher',\n\n  // --- Formatos de OpenOffice / LibreOffice ---\n  'odt': 'application/vnd.oasis.opendocument.text',\n  'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n  'odp': 'application/vnd.oasis.opendocument.presentation',\n  'odg': 'application/vnd.oasis.opendocument.graphics',\n\n  // --- Formatos de Apple iWork ---\n  'pages': 'application/vnd.apple.pages',\n  'numbers': 'application/vnd.apple.numbers',\n  'key': 'application/vnd.apple.keynote',\n\n  // --- Formatos de Imagen ---\n  'png': 'image/png',\n  'jpg': 'image/jpeg',\n  'jpeg': 'image/jpeg',\n  'gif': 'image/gif',\n  'webp': 'image/webp',\n  'svg': 'image/svg+xml',\n  'bmp': 'image/bmp',\n  'ico': 'image/vnd.microsoft.icon',\n  'tif': 'image/tiff',\n  'tiff': 'image/tiff',\n  'heic': 'image/heic',\n  'heif': 'image/heif',\n\n  // --- Formatos de Audio ---\n  'mp3': 'audio/mpeg',\n  'wav': 'audio/wav',\n  'oga': 'audio/ogg',\n  'ogg': 'audio/ogg',\n  'flac': 'audio/flac',\n  'm4a': 'audio/mp4',\n  'aac': 'audio/aac',\n  'opus': 'audio/opus',\n  'wma': 'audio/x-ms-wma',\n  'mid': 'audio/midi',\n  'midi': 'audio/midi',\n\n  // --- Formatos de Video ---\n  'mp4': 'video/mp4',\n  'mov': 'video/quicktime',\n  'webm': 'video/webm',\n  'mpeg': 'video/mpeg',\n  'mpg': 'video/mpeg',\n  'avi': 'video/x-msvideo',\n  'wmv': 'video/x-ms-wmv',\n  'flv': 'video/x-flv',\n  'mkv': 'video/x-matroska',\n\n  // --- Formatos de Archivos y Compresión ---\n  'zip': 'application/zip',\n  'rar': 'application/vnd.rar',\n  '7z': 'application/x-7z-compressed',\n  'tar': 'application/x-tar',\n  'gz': 'application/gzip',\n  'bz2': 'application/x-bzip2',\n\n  // --- Otros Formatos ---\n  'epub': 'application/epub+zip',\n  'ics': 'text/calendar',\n  'vcf': 'text/vcard',\n  'js': 'text/javascript',\n  'css': 'text/css',\n  'sh': 'application/x-sh',\n  'py': 'text/x-python',\n};\n\n// --- Lógica de Procesamiento (sin cambios) ---\n\n// Obtenemos todos los items que llegan al nodo\nconst items = $input.all();\n\n// Iteramos sobre cada item para procesarlo\nfor (const item of items) {\n  // Verificamos que el item tenga datos binarios para procesar\n  if (item.binary && item.binary['data']) {\n    // Obtenemos el nombre del archivo de forma segura\n    const fileName = item.binary['data'].fileName || '';\n    if (!fileName) {\n      continue; // Si no hay nombre de archivo, pasamos al siguiente item\n    }\n\n    // Extraemos la extensión del archivo de forma robusta\n    const extension = fileName.slice((fileName.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n\n    // Buscamos la extensión en nuestro mapa\n    const newMimeType = mimeMap[extension];\n\n    // Si encontramos una coincidencia en el mapa, actualizamos el mimeType\n    if (newMimeType) {\n      if(item.binary['data'].mimeType !== newMimeType) {\n        console.log(`Cambiando mimeType para '${fileName}' de '${item.binary['data'].mimeType}' a '${newMimeType}'.`);\n        item.binary['data'].mimeType = newMimeType;\n      }\n    }\n  }\n}\n\n// Devolvemos todos los items, modificados o no\nreturn items;"
      },
      "id": "d0d68cd7-33a3-4acf-918e-d5a842ac2664",
      "name": "Fix mime6",
      "type": "n8n-nodes-base.code",
      "position": [
        -3200,
        -1952
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "1f4ca90a-f4e9-4089-bec1-1d340992d8ab",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        -2080,
        -1424
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d8935452-fe20-469d-a68d-1aad056cb8dd",
              "name": "message",
              "type": "string",
              "value": "=It was not possible to process the file.File type not supported."
            },
            {
              "id": "38ba2498-2141-4a04-a22a-64563fe2ee6f",
              "name": "chat_id",
              "type": "string",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "121672fb-d44f-4d35-b96a-035712faefc7",
      "name": "get_error_message",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        736
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "sourceData": "binary",
        "extractionValues": {
          "values": [
            {
              "key": "pageTitle",
              "cssSelector": "title"
            },
            {
              "key": "metaDescription",
              "cssSelector": "meta[name=\"description\"]"
            },
            {
              "key": "fullBodyText",
              "cssSelector": "body",
              "returnValue": "html"
            }
          ]
        },
        "options": {
          "cleanUpText": true
        }
      },
      "id": "13b24987-cfe3-4841-bd57-61c26c270e48",
      "name": "HTML Extract Generic1",
      "type": "n8n-nodes-base.html",
      "position": [
        -2080,
        -1232
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "jsCode": "// Get the first item from the input array.\nconst firstItem = items[0];\n\n// Create a new object that has a single key: \"data\".\n// The value of \"data\" will be the entire json object from the input.\n// This gathers all fields (First Name, Last Name, Age, etc.) dynamically.\nconst result = {\n  data: firstItem.json\n};\n\n// Return the newly structured object.\n// It will be outputted as a single item with a 'json' property\n// containing the 'data' object.\nreturn result;"
      },
      "id": "46f5d2c8-2fc6-4027-9d11-110e395b1b93",
      "name": "Get ODS data",
      "type": "n8n-nodes-base.code",
      "position": [
        -2080,
        -656
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b93984-e305-4c11-a856-5fa0bfaaaa79",
              "name": "data",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "28144fde-977f-4ea5-b487-98ef6f7ca24f",
      "name": "Normalize ODS",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        -656
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b93984-e305-4c11-a856-5fa0bfaaaa79",
              "name": "data",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2927ec72-ea8f-4818-9748-b6cc6149ccd4",
      "name": "Normalize CSV",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        -1424
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b4ab7227-9db9-4c74-aa17-80071ee0a7f0",
              "name": "data",
              "type": "string",
              "value": "=Page title:  {{ $json.pageTitle}}\nMeta description: {{ $json.metaDescription }}\nbody: {{ $json.fullBodyText }}"
            }
          ]
        },
        "options": {}
      },
      "id": "822d9682-9b41-4597-9a67-489b95d74ea7",
      "name": "Normalize HTML",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        -1232
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b93984-e305-4c11-a856-5fa0bfaaaa79",
              "name": "data",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "94dd5952-6d86-44dd-8632-fa1d5bdee7f8",
      "name": "Normalize ICS",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        -1040
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b93984-e305-4c11-a856-5fa0bfaaaa79",
              "name": "data",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2b7c9ecb-4694-4be9-adc3-be7c335aba19",
      "name": "Normalize JSON",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        -848
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b93984-e305-4c11-a856-5fa0bfaaaa79",
              "name": "data",
              "type": "string",
              "value": "={{ $json.text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "6e610f5f-541c-482f-b3b9-8998d28bf689",
      "name": "Normalize PDF",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        -464
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b93984-e305-4c11-a856-5fa0bfaaaa79",
              "name": "data",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "10ac1706-2d85-4986-a9e9-a2743abada00",
      "name": "Normalize RTF",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        -32
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b93984-e305-4c11-a856-5fa0bfaaaa79",
              "name": "data",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "8a6d2246-76c9-4a10-9141-175cd768a3f3",
      "name": "Normalize text file",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        160
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b93984-e305-4c11-a856-5fa0bfaaaa79",
              "name": "data",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5cf3d422-6ebc-4c58-ad61-73bc2470afa4",
      "name": "Normalize XML",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        352
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "xml",
        "options": {}
      },
      "id": "70c8b024-6ee2-4e06-ba6e-95f42a7b0cc2",
      "name": "Extract from XML",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -2080,
        352
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b93984-e305-4c11-a856-5fa0bfaaaa79",
              "name": "data",
              "type": "string",
              "value": "={{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5dc82c6d-7717-4ff5-b4d1-00270203127a",
      "name": "Normalize XLSX",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        544
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "// Get the first item from the input array.\nconst firstItem = items[0];\n\n// Create a new object that has a single key: \"data\".\n// The value of \"data\" will be the entire json object from the input.\n// This gathers all fields (First Name, Last Name, Age, etc.) dynamically.\nconst result = {\n  data: firstItem.json\n};\n\n// Return the newly structured object.\n// It will be outputted as a single item with a 'json' property\n// containing the 'data' object.\nreturn result;"
      },
      "id": "4ede2abd-bced-441b-9ecd-e82cd262e351",
      "name": "Get RTF data",
      "type": "n8n-nodes-base.code",
      "position": [
        -2080,
        -32
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "// Get the first item from the input array.\nconst firstItem = items[0];\n\n// Create a new object that has a single key: \"data\".\n// The value of \"data\" will be the entire json object from the input.\n// This gathers all fields (First Name, Last Name, Age, etc.) dynamically.\nconst result = {\n  data: firstItem.json\n};\n\n// Return the newly structured object.\n// It will be outputted as a single item with a 'json' property\n// containing the 'data' object.\nreturn result;"
      },
      "id": "280df0ee-655d-4b4d-a627-1f74e6def087",
      "name": "Get RTF data1",
      "type": "n8n-nodes-base.code",
      "position": [
        -2080,
        544
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d8935452-fe20-469d-a68d-1aad056cb8dd",
              "name": "message",
              "type": "string",
              "value": "=It was not possible to process the file.File type not supported."
            },
            {
              "id": "38ba2498-2141-4a04-a22a-64563fe2ee6f",
              "name": "chat_id",
              "type": "string",
              "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "dbebf33a-336a-4ce2-820e-42163ec610d7",
      "name": "get_error_message1",
      "type": "n8n-nodes-base.set",
      "position": [
        -2752,
        -1568
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "333a436f-c087-4250-a181-40657874959b",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              },
              "leftValue": "={{ $json.text }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "6031c511-2e1d-4984-a684-e1bc7c42a58b",
      "name": "Text?",
      "type": "n8n-nodes-base.if",
      "position": [
        -2528,
        -416
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "resource": "document",
        "modelId": {
          "__rl": true,
          "mode": "list",
          "value": "models/gemini-2.5-pro",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "inputType": "binary",
        "options": {}
      },
      "id": "ff7d0d5e-c49b-4481-91d7-5708dd340617",
      "name": "Analyze document",
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "position": [
        -2080,
        -256
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "7Edtp3c9B45a7r0q",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "24b93984-e305-4c11-a856-5fa0bfaaaa79",
              "name": "data",
              "type": "string",
              "value": "={{ $json.content.parts[0].text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "78fc3ca5-228e-4d78-b757-13fa590d7fe6",
      "name": "Normalize PDF (AI)",
      "type": "n8n-nodes-base.set",
      "position": [
        -1856,
        -256
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "useDataOfInput": 2
      },
      "id": "5c7cba0c-234a-462a-98cc-8bf396a1a950",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        -2304,
        -256
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "jsCode": "/**\n * MarkdownV2-safe formatter + auto-chunker for Telegram (n8n Code node)\n * --------------------------------------------------------------------\n * - Allows: *bold*, _italic_, ||spoiler||, [label](url)\n * - Escapes everything else for Telegram MarkdownV2\n * - Validates/normalizes URLs\n * - Converts \"# Heading\" lines to bold titles\n * - Splits long messages into <= 4096-char chunks (uses a 4000-char budget)\n * - Outputs one item per chunk so the Telegram node sends all parts\n *\n * Recommended: Run this node in \"Run Once for All Items\".\n */\n\nconst MAX_TELEGRAM = 4096;\nconst SAFE_BUDGET = 4000; // small margin to avoid edge overflows\n\n// ============ MarkdownV2 helpers ============\nfunction escapeMarkdownV2(text) {\n  if (!text) return '';\n  return String(text).replace(/([\\\\_*[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n\nfunction escapeForUrl(url) {\n  return String(url).replace(/[)\\\\]/g, '\\\\$&');\n}\n\nfunction normalizeAndValidateUrl(url) {\n  let raw = String(url || '').trim();\n  try {\n    const u = new URL(raw);\n    return u.toString();\n  } catch {}\n  // Try https:// for bare domains\n  const domainLike = /^[a-z0-9.-]+\\.[a-z]{2,}([/:?#].*)?$/i.test(raw);\n  if (domainLike) {\n    try {\n      const u2 = new URL('https://' + raw);\n      return u2.toString();\n    } catch {}\n  }\n  return null;\n}\n\nfunction normalizeHeadings(text) {\n  // Turn \"# Title\" → \"*Title*\"\n  return text.replace(/^(#{1,6})\\s+(.*)$/gm, (m, hashes, title) => `*${title.trim()}*`);\n}\n\nfunction normalizeCommonMd(text) {\n  return String(text)\n    .replace(/\\*\\*([\\s\\S]*?)\\*\\*/g, '*$1*') // **bold** → *bold*\n    .replace(/__([\\s\\S]*?)__/g, '_$1_');    // __italic__ → _italic_\n}\n\n/**\n * Convert incoming text to Telegram-safe MarkdownV2.\n */\nfunction processMarkdownV2Safe(inputText) {\n  if (!inputText) return '';\n\n  let text = normalizeCommonMd(String(inputText));\n  text = normalizeHeadings(text);\n\n  const placeholders = { links: [], bolds: [], italics: [], spoilers: [] };\n\n  // Links: keep safe via placeholders during escaping\n  text = text.replace(/\\[([^\\]\\n]+)\\]\\(([^)]+)\\)/g, (m, label, url) => {\n    const normalizedUrl = normalizeAndValidateUrl(url);\n    if (!normalizedUrl) return escapeMarkdownV2(label);\n    const idx = placeholders.links.length;\n    const ph = `⟬L${idx}⟭`;\n    const safeLabel = escapeMarkdownV2(label);\n    const safeUrl = escapeForUrl(normalizedUrl);\n    placeholders.links.push(`[${safeLabel}](${safeUrl})`);\n    return ph;\n  });\n\n  // Bold\n  text = text.replace(/\\*([\\s\\S]+?)\\*/g, (m, inner) => {\n    const idx = placeholders.bolds.length;\n    const ph = `⟬B${idx}⟭`;\n    placeholders.bolds.push(`*${escapeMarkdownV2(inner)}*`);\n    return ph;\n  });\n\n  // Italic\n  text = text.replace(/_([\\s\\S]+?)_/g, (m, inner) => {\n    const idx = placeholders.italics.length;\n    const ph = `⟬I${idx}⟭`;\n    placeholders.italics.push(`_${escapeMarkdownV2(inner)}_`);\n    return ph;\n  });\n\n  // Spoilers\n  text = text.replace(/\\|\\|([\\s\\S]+?)\\|\\|/g, (m, inner) => {\n    const idx = placeholders.spoilers.length;\n    const ph = `⟬S${idx}⟭`;\n    placeholders.spoilers.push(`||${escapeMarkdownV2(inner)}||`);\n    return ph;\n  });\n\n  // Escape everything else\n  text = escapeMarkdownV2(text);\n\n  // Restore placeholders\n  placeholders.links.forEach((md, i) => { text = text.replace(`⟬L${i}⟭`, md); });\n  placeholders.bolds.forEach((md, i) => { text = text.replace(`⟬B${i}⟭`, md); });\n  placeholders.italics.forEach((md, i) => { text = text.replace(`⟬I${i}⟭`, md); });\n  placeholders.spoilers.forEach((md, i) => { text = text.replace(`⟬S${i}⟭`, md); });\n\n  return text;\n}\n\n// ============ Chunking helpers ============\n/**\n * Split text into Telegram-safe chunks <= maxLen.\n * Prefers paragraph boundaries, then sentence boundaries, then words.\n * Falls back to hard cuts only when unavoidable (e.g., extremely long URL).\n */\nfunction chunkForTelegram(text, maxLen = SAFE_BUDGET) {\n  if (!text || text.length <= maxLen) return [text || ''];\n\n  const parts = [];\n  let buffer = '';\n\n  const flush = () => {\n    if (buffer) {\n      parts.push(buffer);\n      buffer = '';\n    }\n  };\n\n  // 1) Paragraph-level packing\n  const paragraphs = text.split(/\\n{2,}/);\n  for (const pRaw of paragraphs) {\n    const p = pRaw; // keep paragraph as-is\n    const candidate = buffer ? buffer + '\\n\\n' + p : p;\n    if (candidate.length <= maxLen) {\n      buffer = candidate;\n      continue;\n    }\n    if (p.length <= maxLen) {\n      flush();\n      buffer = p;\n      continue;\n    }\n\n    // 2) Sentence-level packing (paragraph is still too big)\n    flush();\n    const sentences = p.split(/(?<=[.!?…])\\s+(?=[^\\s])/u);\n    let sBuf = '';\n    for (const s of sentences) {\n      const sCandidate = sBuf ? sBuf + ' ' + s : s;\n      if (sCandidate.length <= maxLen) {\n        sBuf = sCandidate;\n        continue;\n      }\n      if (s.length <= maxLen) {\n        if (sBuf) parts.push(sBuf);\n        sBuf = s;\n        continue;\n      }\n\n      // 3) Word-level packing (sentence is still too big)\n      if (sBuf) { parts.push(sBuf); sBuf = ''; }\n      let wBuf = '';\n      const words = s.split(/\\s+/);\n      for (const w of words) {\n        const wCandidate = wBuf ? wBuf + ' ' + w : w;\n        if (wCandidate.length <= maxLen) {\n          wBuf = wCandidate;\n          continue;\n        }\n        if (w.length <= maxLen) {\n          if (wBuf) parts.push(wBuf);\n          wBuf = w;\n          continue;\n        }\n        // 4) Hard split (extremely long token, e.g., massive URL)\n        if (wBuf) { parts.push(wBuf); wBuf = ''; }\n        const re = new RegExp(`.{1,${maxLen}}`, 'g');\n        const hardPieces = w.match(re) || [];\n        parts.push(...hardPieces);\n      }\n      if (wBuf) parts.push(wBuf);\n    }\n    if (sBuf) parts.push(sBuf);\n  }\n  if (buffer) parts.push(buffer);\n\n  // Final safety pass: trim chunks that might still exceed MAX_TELEGRAM\n  return parts.flatMap(part => {\n    if (part.length <= MAX_TELEGRAM) return [part];\n    const re = new RegExp(`.{1,${SAFE_BUDGET}}`, 'g');\n    return part.match(re) || [];\n  });\n}\n\n// ============ Main ============\nconst inputItems = $input.all();\nconst out = [];\n\nfor (const item of inputItems) {\n  const j = item.json || {};\n  const raw =\n    j.message ?? j.output ?? j.text ?? j.content ?? '';\n\n  const formatted = processMarkdownV2Safe(raw);\n  const chunks = chunkForTelegram(formatted, SAFE_BUDGET);\n\n  chunks.forEach((chunk, idx) => {\n    out.push({\n      json: {\n        ...j,\n        message: chunk,\n        message_part_index: idx + 1,\n        message_parts_total: chunks.length,\n      },\n      binary: item.binary,\n    });\n  });\n}\n\nreturn out;\n"
      },
      "id": "818445f6-4754-4035-b394-5fa6cf8d3f7f",
      "name": "MarkdownV2",
      "type": "n8n-nodes-base.code",
      "position": [
        -48,
        -352
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "",
        "height": 144,
        "width": 576,
        "color": 7
      },
      "id": "e33f24d5-c5b8-4b43-b5f4-c9cb18928ebc",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -3296,
        -2864
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b9c92d3b-db05-4d27-968e-3fc8b27d4d2b",
              "name": "message",
              "type": "string",
              "value": "={{ $json.unifiedMessage }}"
            },
            {
              "id": "812d7730-117c-4d1f-b18e-8c3561e86c5e",
              "name": "chat_id",
              "type": "number",
              "value": "={{ $('get_chat_id').first().json.chat_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a2f6d01d-34db-46e8-86b5-1df8345b9109",
      "name": "Get_message (multiple files)",
      "type": "n8n-nodes-base.set",
      "position": [
        -960,
        928
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "4dace23c-331c-448e-873e-b3ef0d79ad6f",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "position": [
        -3872,
        -2272
      ],
      "webhookId": "e9030185-5468-4529-8f4f-d7eec5daf8f0",
      "typeVersion": 1.2,
      "credentials": {
        "telegramApi": {
          "id": "YqfxEa6do8Zh0l5f",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "eb807b26-c415-42d2-9cef-707825d6fa82",
              "name": "message",
              "type": "string",
              "value": "={{ $json.message }}"
            },
            {
              "id": "62235ef7-8bc9-485b-bb75-4fc2c5829cfb",
              "name": "chat_id",
              "type": "number",
              "value": "={{ $json.chat_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "be4728fa-1bc6-43e5-a50d-85380c2fed30",
      "name": "Normalize input",
      "type": "n8n-nodes-base.set",
      "position": [
        -736,
        -352
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "model": "x-ai/grok-4",
        "options": {
          "temperature": 0.1,
          "maxRetries": 5
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -512,
        -128
      ],
      "id": "12dfa1b1-bf70-4cf7-8dee-19e4794535b0",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "NneibPu6mNgdpjb0",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "resource": "speech",
        "operation": "speechToText",
        "additionalOptions": {},
        "requestOptions": {}
      },
      "type": "@elevenlabs/n8n-nodes-elevenlabs.elevenLabs",
      "typeVersion": 1,
      "position": [
        -2976,
        -1952
      ],
      "id": "5db798b5-56c6-4ee5-b6a1-b73174c021c6",
      "name": "Transcribe audio or video",
      "credentials": {
        "elevenLabsApi": {
          "id": "OE6ZbJmpS5trUyYH",
          "name": "ElevenLabs account"
        }
      }
    },
    {
      "parameters": {
        "resource": "speech",
        "operation": "speechToText",
        "additionalOptions": {},
        "requestOptions": {}
      },
      "type": "@elevenlabs/n8n-nodes-elevenlabs.elevenLabs",
      "typeVersion": 1,
      "position": [
        -2976,
        -2336
      ],
      "id": "8a010a19-0276-451b-9153-3aa43968bcfd",
      "name": "Transcribe audio or video1",
      "credentials": {
        "elevenLabsApi": {
          "id": "OE6ZbJmpS5trUyYH",
          "name": "ElevenLabs account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4ec6e38e-1899-46ef-82cd-fb9389960109",
              "name": "content.parts",
              "value": "={{ [{ \"text\": $json.text }] }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2752,
        -1952
      ],
      "id": "7979c5bd-332c-40f4-9fb3-4740deba830e",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4ec6e38e-1899-46ef-82cd-fb9389960109",
              "name": "content.parts",
              "value": "={{ [{ \"text\": $json.text }] }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2752,
        -2336
      ],
      "id": "50c39440-7a4e-43b8-b723-1a026e8c9a6a",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "endpointUrl": "https://n8n.mwdm.cloud/mcp/mcpeepee",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
      "typeVersion": 1.2,
      "position": [
        -224,
        -112
      ],
      "id": "71efc580-029b-47b4-99b2-cbeeed2bd54a",
      "name": "MCP Client"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $now.toFormat('yyyy-MM-dd') }}.1.2.12.4",
        "contextWindowLength": 200
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -384,
        -112
      ],
      "id": "0dfaa426-7057-4e25-a1af-dada7c49312a",
      "name": "Simple Memory"
    }
  ],
  "connections": {
    "Download Voice Message": {
      "main": [
        [
          {
            "node": "Fix mime",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Message Router1": {
      "main": [
        [
          {
            "node": "get_message (text)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download Voice Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download VIDEO NOTE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download IMAGE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download AUDIO",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download VIDEO",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Group Similar Documents",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get_error_message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Media_group?2": {
      "main": [
        [
          {
            "node": "Insert documents in media_group",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get_file_and_captions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Captions?1": {
      "main": [
        [
          {
            "node": "Media_group?2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Media_group?3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Media_group?3": {
      "main": [
        [
          {
            "node": "Insert documents in media_group1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get_only_file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert documents in media_group": {
      "main": [
        [
          {
            "node": "Insert media_queue with captions (Trigger)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert documents in media_group1": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Insert media_queue (Trigger)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get_file_and_captions": {
      "main": [
        [
          {
            "node": "Normalize input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_message (text)": {
      "main": [
        [
          {
            "node": "Normalize input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get_only_file": {
      "main": [
        [
          {
            "node": "Normalize input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "unified_variables": {
      "main": [
        [
          {
            "node": "Get_message (multiple files)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for all the files": {
      "main": [
        [
          {
            "node": "Get all files from group_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get all files from group_id": {
      "main": [
        [
          {
            "node": "unified_variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Media_queue Trigger": {
      "main": [
        [
          {
            "node": "get_chat_id",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_chat_id": {
      "main": [
        [
          {
            "node": "Wait for all the files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "MarkdownV2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Group Similar Documents": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download CSV": {
      "main": [
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download HTML": {
      "main": [
        [
          {
            "node": "HTML Extract Generic1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download ICS": {
      "main": [
        [
          {
            "node": "Extract from ICS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from ICS": {
      "main": [
        [
          {
            "node": "Normalize ICS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download JSON": {
      "main": [
        [
          {
            "node": "Extract from JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from JSON": {
      "main": [
        [
          {
            "node": "Normalize JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download ODS": {
      "main": [
        [
          {
            "node": "Extract from ODS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from ODS": {
      "main": [
        [
          {
            "node": "Get ODS data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download PDF": {
      "main": [
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "Text?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download RTF": {
      "main": [
        [
          {
            "node": "Extract from RTF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from RTF": {
      "main": [
        [
          {
            "node": "Get RTF data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download TEXT FILE": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Normalize text file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download XML": {
      "main": [
        [
          {
            "node": "Extract from XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download XLSX": {
      "main": [
        [
          {
            "node": "Extract from XLSX",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from XLSX": {
      "main": [
        [
          {
            "node": "Get RTF data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download IMAGE": {
      "main": [
        [
          {
            "node": "Fix mime5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download AUDIO": {
      "main": [
        [
          {
            "node": "Fix mime6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download VIDEO": {
      "main": [
        [
          {
            "node": "Fix mime4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze image": {
      "main": [
        [
          {
            "node": "get_message (Media  message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze video": {
      "main": [
        [
          {
            "node": "get_message (Media  message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze voice message": {
      "main": [
        [
          {
            "node": "get_message (Audio/Video message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix mime4": {
      "main": [
        [
          {
            "node": "Analyze video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Download CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download HTML",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download ICS",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download JSON",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download ODS",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download RTF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download TEXT FILE",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download XML",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download XLSX",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "get_error_message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download VIDEO NOTE": {
      "main": [
        [
          {
            "node": "Fix mime1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_message (Audio/Video message)": {
      "main": [
        [
          {
            "node": "Normalize input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_message (Media  message)": {
      "main": [
        [
          {
            "node": "Captions?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_message (File message)": {
      "main": [
        [
          {
            "node": "Captions?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix mime": {
      "main": [
        [
          {
            "node": "Analyze voice message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix mime1": {
      "main": [
        [
          {
            "node": "Transcribe audio or video1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix mime5": {
      "main": [
        [
          {
            "node": "Analyze image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix mime6": {
      "main": [
        [
          {
            "node": "Transcribe audio or video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Normalize CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_error_message": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML Extract Generic1": {
      "main": [
        [
          {
            "node": "Normalize HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get ODS data": {
      "main": [
        [
          {
            "node": "Normalize ODS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize ODS": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize CSV": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize HTML": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize ICS": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize JSON": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize PDF": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize RTF": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize text file": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize XML": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from XML": {
      "main": [
        [
          {
            "node": "Normalize XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize XLSX": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get RTF data": {
      "main": [
        [
          {
            "node": "Normalize RTF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get RTF data1": {
      "main": [
        [
          {
            "node": "Normalize XLSX",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_error_message1": {
      "main": [
        [
          {
            "node": "get_message (Media  message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text?": {
      "main": [
        [
          {
            "node": "Normalize PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze document": {
      "main": [
        [
          {
            "node": "Normalize PDF (AI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize PDF (AI)": {
      "main": [
        [
          {
            "node": "get_message (File message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Analyze document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MarkdownV2": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get_message (multiple files)": {
      "main": [
        [
          {
            "node": "Normalize input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Input Message Router1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize input": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Transcribe audio or video": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe audio or video1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "get_message (Media  message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "get_message (Audio/Video message)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MCP Client": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {
    "Telegram Trigger": [
      {
        "update_id": 129303575,
        "message": {
          "message_id": 35,
          "from": {
            "id": 5746334154,
            "is_bot": false,
            "first_name": "Mat",
            "language_code": "en"
          },
          "chat": {
            "id": 5746334154,
            "first_name": "Mat",
            "type": "private"
          },
          "date": 1761708766,
          "photo": [
            {
              "file_id": "AgACAgUAAxkBAAMjaQGK3qk9OPgZcvxTiBPkyjCufVcAAoQLaxv3axFU_mxDg7UfUzwBAAMCAANzAAM2BA",
              "file_unique_id": "AQADhAtrG_drEVR4",
              "file_size": 1425,
              "width": 51,
              "height": 90
            },
            {
              "file_id": "AgACAgUAAxkBAAMjaQGK3qk9OPgZcvxTiBPkyjCufVcAAoQLaxv3axFU_mxDg7UfUzwBAAMCAANtAAM2BA",
              "file_unique_id": "AQADhAtrG_drEVRy",
              "file_size": 17194,
              "width": 183,
              "height": 320
            },
            {
              "file_id": "AgACAgUAAxkBAAMjaQGK3qk9OPgZcvxTiBPkyjCufVcAAoQLaxv3axFU_mxDg7UfUzwBAAMCAAN4AAM2BA",
              "file_unique_id": "AQADhAtrG_drEVR9",
              "file_size": 69530,
              "width": 457,
              "height": 800
            },
            {
              "file_id": "AgACAgUAAxkBAAMjaQGK3qk9OPgZcvxTiBPkyjCufVcAAoQLaxv3axFU_mxDg7UfUzwBAAMCAAN5AAM2BA",
              "file_unique_id": "AQADhAtrG_drEVR-",
              "file_size": 94665,
              "width": 731,
              "height": 1280
            }
          ],
          "caption": "What is this"
        }
      }
    ]
  },
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1ae9151ff4574b68483edfb52b1629bdc069039971f486d0926a74f6aa55c171"
  }
}
